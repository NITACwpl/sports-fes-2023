---
import SubTitle from "../SubTitle.astro";
import BaskertMap from "/tournaments/basketball.svg?raw";
import TableTennisMap from "/tournaments/tabletennis.svg?raw";
import TennisMap from "/tournaments/tennis.svg?raw";
import SoftballMap from "/tournaments/softball.svg?raw";
import SoccerMap from "/tournaments/soccer.svg?raw";
import BadmintonMap from "/tournaments/badminton.svg?raw";
import ValleyballMap from "/tournaments/valleyball.svg?raw";
import Icon from "astro-iconify";
let maps = [
    {
        image: BaskertMap,
        name: "バスケットボール",
    },
    {
        image: TableTennisMap,
        name: "卓球",
    },
    {
        image: TennisMap,
        name: "テニス",
    },
    {
        image: SoftballMap,
        name: "ソフトボール",
    },
    {
        image: SoccerMap,
        name: "サッカー",
    },
    {
        image: BadmintonMap,
        name: "バドミントン",
    },
    {
        image: ValleyballMap,
        name: "バレーボール",
    },
];
---

<div class="tournament" id="contents-tournament">
    <div id="loading">
        <Icon name="mingcute:loading-line" class="loading-icon" />
        <p class="text-20">情報を更新中です。</p>
        <p class="text-20">5秒間待ってくれ！！</p>
        <button class="loading-cancel text-16">閉じる</button>
    </div>
    <SubTitle title="トーナメント" />
    <button class="reload">
        <Icon name="ion:reload" class="reload-icon" />
        <p class="text-16">最新情報をGet!!</p>
    </button>
    <div class="acordion-wrapper">
        {
            maps.map((item) => (
                // acordion here
                <details class="accordion-001">
                    <summary>{item.name}</summary>
                    <div>
                        <Fragment set:html={item.image} />
                    </div>
                </details>
            ))
        }
    </div>
</div>

<style is:global>
    .svg-tournament {
        width: 100%;
        height: 100%;
    }

    .winner {
        fill: red;
    }

    .reload {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 4px;
        margin-block: 20px;
        padding: 10px;
        border-radius: 4px;
        background-color: var(--color-primary-orange-200);
        cursor: pointer;
    }

    .reload-icon {
        width: 16px;
        height: 16px;
        margin-inline: 5px;
    }

    #loading {
        display: flex;
        flex-direction: column;
        opacity: 0;
        visibility: hidden;
        justify-content: center;
        align-items: center;
        gap: 10px;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100dvh;
        z-index: 1000;
        background-color: rgba(255, 255, 255, 0.7);
    }
    #loading.is-active {
        visibility: visible;
        opacity: 1;
    }

    .loading-icon {
        width: 100px;
        height: 100px;
        color: var(--color-primary-orange-200);
        animation: spin 1s linear infinite;
        transition: all 3s ease-in-out;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .loading-cancel {
        padding: 12px 20px;
        margin-top: 10px;
        border-radius: 50px;
        background-color: var(--color-primary-orange-200);
        cursor: pointer;
    }

    .acordion-wrapper {
        margin-inline: auto;
    }

    .accordion-001 {
        max-width: 100%;
        max-height: 600px;
        background-color: #ffe6c7;
    }

    .accordion-001:not([open]) {
        margin-bottom: 7px;
    }

    .accordion-001 summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        padding: 1em 2em;
        border-radius: 5px;
        background-color: #ffa114;
        color: #fff;
        font-size: 12px;
        font-weight: 600;
        cursor: pointer;
    }

    .accordion-001 summary::-webkit-details-marker {
        display: none;
    }

    .accordion-001 summary::before,
    .accordion-001 summary::after {
        width: 3px;
        height: 0.9em;
        border-radius: 5px;
        background-color: #fff;
        content: "";
    }

    .accordion-001 summary::before {
        position: absolute;
        right: 2em;
        rotate: 90deg;
    }

    .accordion-001 summary::after {
        transition: rotate 0.3s;
    }

    .accordion-001[open] summary::after {
        rotate: 90deg;
    }
</style>

<script>
    import { getWinner } from "../../lib/getTornamentWinner";

    const sports = [
        "basketball",
        "tabletennis",
        "tennis",
        "softball",
        "soccer",
        "badminton",
        "valleyball-female",
        "valleyball-male",
    ];

    let fetchData;

    const getTournamentData = async () => {
        try {
            document.querySelector("#loading").classList.add("is-active");
            const response = await fetch(
                "https://script.google.com/macros/s/AKfycbzGDVB1KrosnxhTdX-TsP-_TW6w19PQF2UQ8v3OkPIsu5IZzweF031sKcvYoTKzzlyf/exec",
            );
            fetchData = await response.json();
        } catch (error) {
            console.log(error);
        } finally {
            for (let i = 0; i < sports.length; i++) {
                let data;
                if (sports[i] === "valleyball-female") {
                    data = fetchData[i + 2].slice(0, 3);
                } else if (sports[i] === "valleyball-male") {
                    data = fetchData[i + 1].slice(3, 8);
                } else {
                    data = fetchData[i + 2];
                }
                getWinner(sports[i], data);
            }
            document.querySelector("#loading").classList.remove("is-active");
        }
    };

    window.onload = () => {
        getTournamentData();
    };

    const reloadButton = document.querySelector(".reload");
    reloadButton.addEventListener("click", () => {
        getTournamentData();
    });

    const cancelButton = document.querySelector(".loading-cancel");
    cancelButton.addEventListener("click", () => {
        document.querySelector("#loading").classList.remove("is-active");
    });
</script>
